{"version":3,"sources":["Header.js","Footer.js","HomePage.js","firebase.js","CreatePoll.js","PollAnalytics.js","PollResults.js","ViewPoll.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Footer","CreatePoll","src","alt","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","handleChange","e","target","id","setState","name","value","question","optionA","optionB","isQuestion","string","lastIndex","length","charAt","concat","handleSubmit","event","preventDefault","dbRef","database","ref","state","OptionA","pollObject","optionACount","optionBCount","key","push","display","handleReset","this","console","log","action","onSubmit","onReset","htmlFor","type","onChange","required","maxLength","PollAnalytics","poll","props","match","params","pollKey","on","snapshot","val","PollResults","ViewPoll","userSelection","handleSelected","sendCount","selection","once","snap","count","set","updateStorage","answeredPollsStorage","window","localStorage","getItem","answeredPollsArray","split","setItem","join","checkIsAnswered","answeredPollStorage","some","storedKey","optionOneCount","optionTwoCount","isPollStored","isPollAnswered","ariarole","onClick","handleSelect","undefined","role","aria-labelledby","App","exact","path","component","HomePage","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d06dde3b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport './createpoll.css'\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"header\">\n        <Link to=\"/anonymousVotingBooth\">\n          <h1>Poll it Together</h1>\n        </Link>\n        <Link to=\"/createpoll\">Create a Poll</Link>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./createpoll.css\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <div className=\"footer\">\n        <p>Copyright Â© 2020</p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","// Imports ----- +\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Component ----- +\nclass CreatePoll extends Component {\n  render() {\n    return (\n      <main className=\"homePage\">\n        <div className=\"styleBlock block1\">\n          <div className=\"copyContainer\">\n            <div className=\"imgWrapper left\">\n              {/* !!!!! - TEST NEEDS ALT TEXT */}\n              <img\n                src=\"https://files.gumroad.com/attachments/1211634803146/efcd33204e4444adb964615e0a9ffe72/original/handshake-colour-400px.png?response-content-disposition=attachment&verify=1597734461-vyHufNgVCJGzBzz2JgNV2%2BVkUl2bt7kOtk%2BQ90WN734%3D\"\n                alt=\"\"\n              />\n            </div>\n            <div className=\"copyWrapper\">\n              <h2>Finally Settle It!</h2>\n              <p>\n                Whether its money, the last doughnut or your pride at stake, you\n                can always settle it with a poll!\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"styleBlock block2\">\n          <div className=\"copyContainer\">\n            <div className=\"copyWrapper\">\n              <h2>Use Anywhere</h2>\n              <p>\n                Use your customized poll to poll your team in slack, plan your family picnic on facebook, or even settle a hot debate in whatsapp! Your poll can go anywhere and do anything. It's omnipolltent!\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"styleBlock block3\">\n          <div className=\"copyContainer\">\n            <div className=\"imgWrapper right\">\n              {/* !!!!! TEST - NEEDS ALT TEXT */}\n              <img\n                src=\"https://files.gumroad.com/attachments/1211634803146/94a5f34678a24fd1a741836d6a62522d/original/app-user-colour-400px.png?response-content-disposition=attachment&verify=1597735299-yBS9JiCDECTQV7eYcZmhOsXtbg6nHHMsjPu%2FRMUXec0%3D\"\n                alt=\"\"\n              />\n            </div>\n            <div className=\"copyWrapper\">\n              <h2>Share With Friends</h2>\n              <p>\n                Share the link to your poll with friends, family members, and peers! Post it on your wall, or on an instagram story. There is literally no place on the internet for your friends to hide from your poll!\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"toCreatePoll\">\n          <h3>Create a Poll</h3>\n          <p>Take me to the Poll Maker!</p>\n          <Link to=\"/createpoll\" className=\"button\">\n            Create\n          </Link>\n        </div>\n      </main>\n    );\n  }\n}\nexport default CreatePoll;\n","// Imports ----- +\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// Configure firebase ----- +\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDQOt04CcDsNhQHAyZMFwjSLY1X2MuEQTg\",\n  authDomain: \"voting-booth-4107f.firebaseapp.com\",\n  databaseURL: \"https://voting-booth-4107f.firebaseio.com\",\n  projectId: \"voting-booth-4107f\",\n  storageBucket: \"voting-booth-4107f.appspot.com\",\n  messagingSenderId: \"424744854902\",\n  appId: \"1:424744854902:web:8119084df741436fab4657\",\n};\n\n// Initialize Firebase ----- +\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","// Imports ----- +\nimport React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport { Link } from \"react-router-dom\";\nimport \"./createpoll.css\";\n\n// Component ----- +\nclass CreatePoll extends Component {\n  constructor() {\n    super();\n    this.state = {\n      key: \"\",\n      name: \"\",\n      question: \"\",\n      optionA: \"\",\n      optionB: \"\",\n      display: \"form\",\n    };\n  }\n\n  // Component Methods -----+\n  handleChange = (e) => {\n    switch (e.target.id) {\n      case \"name\":\n        this.setState({\n          name: e.target.value,\n        });\n        break;\n      case \"question\":\n        this.setState({\n          question: e.target.value,\n        });\n        break;\n      case \"optionA\":\n        this.setState({\n          optionA: e.target.value,\n        });\n        break;\n      case \"optionB\":\n        this.setState({\n          optionB: e.target.value,\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Takes a string as an argument, if string does not have a \"?\" append it to the end\n  isQuestion = (string) => {\n    const lastIndex = string.length - 1;\n    if (string.charAt(lastIndex) !== \"?\") {\n      return string.concat(\"?\");\n    } else {\n      return string;\n    }\n  };\n\n  //\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n    const state = this.state;\n    const question = this.isQuestion(state.question);\n\n    // If form is not empty, update state with from data and push it to firebase\n    if (\n      state.question !== \"\" &&\n      state.name !== \"\" &&\n      state.OptionA !== \"\" &&\n      state.optionB !== \"\"\n    ) {\n      const pollObject = {\n        name: state.name,\n        question,\n        optionA: state.optionA,\n        optionB: state.optionB,\n        optionACount: 0,\n        optionBCount: 0,\n      };\n      const { key } = dbRef.push(pollObject);\n      this.setState({\n        key,\n        name: \"\",\n        question: \"\",\n        optionA: \"\",\n        optionB: \"\",\n        display: \"modal\",\n      });\n    }\n  };\n\n  handleReset = (e) => {\n    e.preventDefault();\n    this.setState({\n      key: \"\",\n      name: \"\",\n      question: \"\",\n      optionA: \"\",\n      optionB: \"\",\n      display: \"modal\",\n    });\n  };\n\n  render() {\n    const state = this.state;\n    const key = state.key;\n    console.log(\"display:\", this.state.display);\n    return (\n      <main className=\"createPollMain\">\n        {(state.display === \"form\" || state.display === \"modal\") && (\n          <section className=\"createPoll\">\n            <div className=\"copyWrapper\">\n              <h2>Make a Poll!</h2>\n              <p>\n                Use the form below to make your poll! It 's not rocket science.\n                Or is it ? Only one way to find out - make a poll!\n              </p>\n            </div>\n            <form\n              action=\"/\"\n              onSubmit={this.handleSubmit}\n              onReset={this.handleReset}\n              className=\"createPollForm\"\n            >\n              <div className=\"copyWrapper\">\n                <h2>Create Your Poll</h2>\n                <label htmlFor=\"name\">\n                  <span>Name</span>Tell us who you are!\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  value={state.name}\n                  onChange={this.handleChange}\n                  required\n                />\n                <label htmlFor=\"question\">\n                  <span>Question</span>What do you wanna know?\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"question\"\n                  value={state.question}\n                  onChange={this.handleChange}\n                  required\n                />\n                <label htmlFor=\"optionA\">\n                  <span>Option A</span>What's the first choice?\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"optionA\"\n                  value={state.optionA}\n                  onChange={this.handleChange}\n                  required\n                  maxLength=\"25 characters\"\n                />\n                <label htmlFor=\"optionB\">\n                  <span>Option B</span>Put the second choice here!\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"optionB\"\n                  value={state.optionB}\n                  onChange={this.handleChange}\n                  required\n                  maxLength=\"25 characters\"\n                />\n                <div className=\"buttonContainer\">\n                  <button type=\"submit\">I'm done!</button>\n                  <button type=\"reset\" className=\"resetButton\">\n                    Reset\n                  </button>\n                </div>\n              </div>\n            </form>\n          </section>\n        )}\n\n        {state.display === \"modal\" && (\n          <div className=\"pollModalWrapper\">\n            <div className=\"pollModal\">\n              <h2>Wow! You just made a poll!</h2>\n              <p>\n                We expected this, so we made a little chart of your poll's\n                stat's just for you! We did this because we care.\n              </p>\n              <Link to={`/polls/${key}/analytics`} className=\"button\">\n                Poll up your stats!\n              </Link>\n            </div>\n          </div>\n        )}\n      </main>\n    );\n  }\n}\nexport default CreatePoll;\n","// Imports ----- +\nimport React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport { Link } from \"react-router-dom\";\nimport \"./analytics.css\";\n\n// Component ----- +\nclass PollAnalytics extends Component {\n  constructor() {\n    super();\n    this.state = {\n      poll: {},\n    };\n  }\n\n  // Takes the router link variable and passes it as an argument in the ref firebase method to retrieve\n  componentDidMount() {\n    const key = this.props.match.params.pollKey;\n    firebase\n      .database()\n      .ref(key)\n      .on(\"value\", (snapshot) => {\n        this.setState({\n          poll: snapshot.val(),\n        });\n      });\n  }\n\n  // Render JSX  ----- +\n  render() {\n    const key = this.props.match.params.pollKey;\n    const poll = this.state.poll;\n    return (\n      <main className=\"pageContainer analytics\">\n        <h2>Your Poll Analytics!</h2>\n        <p>\n          As poll creater, you can spy on the anonymous votes before anyone\n          else. Whenever you are ready to make your research public, reveal the\n          results with your friends and family with the click of a button!\n        </p>\n        <section className=\"analyticsInfo\">\n          <h2>{poll.name}'s Poll Analytics</h2>\n          <div className=\"copyWrapper\">\n            <p className=\"pollQuestion\">{poll.question}</p>\n            <p> Option A: {poll.optionA}</p>\n            <p> Option B: {poll.optionB}</p>\n          </div>\n          <div className=\"pollCounters\">\n            <div className=\"count countA\">\n              <p className=\"option\">A votes</p>\n              <p className=\"countNum\">{poll.optionACount}</p>\n            </div>\n            <div className=\"count countB\">\n              <p className=\"option\">B votes </p>\n              <p className=\"countNum\">{poll.optionBCount}</p>\n            </div>\n            <div className=\"count countTotal\">\n              <p className=\"option\">Total</p>\n              <p className=\"countNum\">\n                {poll.optionACount + poll.optionBCount}\n              </p>\n            </div>\n          </div>\n          <p>Need votes? Share your poll with the link below!</p>\n          <p className=\"usersPollLink\">{`https://spring2anonymouspoll.github.io/polls/${key}/view`}</p>\n          <Link className=\"button\" to={`/polls/${key}/view`}>\n            Share your poll!\n          </Link>\n          <p>Ready to share your results? Send the link below!</p>\n          <Link className=\"button\" to={`/polls/${key}/results`}>\n            Share your Results!\n          </Link>\n          <p className=\"usersPollLink\">{`https://spring2anonymouspoll.github.io/polls/${key}/view`}</p>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default PollAnalytics;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\nclass PollResults extends Component {\n  constructor() {\n    super();\n    this.state = {\n      poll: {},\n    };\n  }\n\n  componentDidMount() {\n    const key = this.props.match.params.pollKey;\n    firebase\n      .database()\n      .ref(key)\n      .on(\"value\", (snapshot) => {\n        this.setState({\n          poll: snapshot.val(),\n        });\n      });\n  }\n\n  // Render JSX  ----- +\n  render() {\n    const poll = this.state.poll;\n    return (\n      <main className=\"pageContainer analytics\">\n        <h2>{poll.name}'s Poll Results are In!!</h2>\n        <section className=\"analyticsInfo\">\n          <h2>{poll.name}'s poll Results</h2>\n          <div className=\"copyWrapper\">\n            <p className=\"pollQuestion\">{poll.question}</p>\n            <p> Option A: {poll.optionA}</p>\n            <p> Option B: {poll.optionB}</p>\n          </div>\n          <div className=\"pollCounters\">\n            <div className=\"count countA\">\n              <p className=\"option\">A votes</p>\n              <p className=\"countNum\">{poll.optionACount}</p>\n            </div>\n            <div className=\"count countB\">\n              <p className=\"option\">B votes </p>\n              <p className=\"countNum\">{poll.optionBCount}</p>\n            </div>\n            <div className=\"count countTotal\">\n              <p className=\"option\">Total</p>\n              <p className=\"countNum\">\n                {poll.optionACount + poll.optionBCount}\n              </p>\n            </div>\n          </div>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default PollResults;\n","// Imports ----- +\nimport React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport \"./viewpoll.css\";\n\n// Module Variables ---- +\nconst localStorageItem = \"answeredPolls\";\n\n// Component ----- +\nclass ViewPoll extends Component {\n  constructor() {\n    super();\n    this.state = {\n      poll: {},\n      userSelection: \"\",\n      optionACount: 0,\n      optionBCount: 0,\n      isPollAnswered: false,\n      isPollStored: false,\n    };\n  }\n\n  componentDidMount() {\n    const key = this.props.match.params.pollKey;\n    firebase\n      .database()\n      .ref(key)\n      .on(\"value\", (snapshot) => {\n        this.setState({\n          poll: snapshot.val(),\n        });\n      });\n  }\n\n  // === Component Methods ===\n\n  // When radio button is clicked the value of the id attribute is stored in state ---\n  handleChange = (e) => {\n    this.setState({\n      userSelection: e.target.id,\n    });\n  };\n\n  handleSelected = () => {};\n\n  // Takes radio selection from state (correspondomg with the option property in our firebase object) as an argument. The current poll object and user selection is targeted in the firebase database and it's count is incresed by one ---\n  sendCount = (selection) => {\n    const key = this.props.match.params.pollKey;\n    const dbRef = firebase.database().ref(`${key}/${selection}`);\n    dbRef.once(\"value\", (snap) => {\n      let count = snap.val();\n      count++;\n      dbRef.set(count);\n    });\n  };\n\n  // Takes a key as an argument and stores it in a comma separated string in local sotrage\n  updateStorage = (key) => {\n    const answeredPollsStorage = window.localStorage.getItem(localStorageItem);\n    const answeredPollsArray = [];\n    if (answeredPollsStorage) {\n      answeredPollsArray.push(...answeredPollsStorage.split(\",\"));\n    }\n    answeredPollsArray.push(key);\n    window.localStorage.setItem(localStorageItem, answeredPollsArray.join(\",\"));\n  };\n\n  // Takes a key and checks the local storage string to see if that key is in storage and returns a boolean\n  checkIsAnswered = (key) => {\n    const answeredPollStorage = window.localStorage.getItem(localStorageItem);\n    if (answeredPollStorage) {\n      return answeredPollStorage.split(\",\").some((storedKey) => {\n        return storedKey === key;\n      });\n    } else {\n      return false;\n    }\n  };\n\n  // We look at the user selection currently stored in state at time the submit button is clicked, and depending on which option is store in state, we pass that value as an argument to our send count method ---\n  handleSubmit = (e) => {\n    const key = this.props.match.params.pollKey;\n    const state = this.state;\n    e.preventDefault();\n    let optionA = state.optionOneCount;\n    let optionB = state.optionTwoCount;\n\n    // Checks if poll has been answered. If no, stops sumbit function\n    if (this.checkIsAnswered(key)) {\n      this.setState({\n        isPollStored: true,\n      });\n      return;\n    }\n\n    // Adds the poll key to list of stored items\n    this.updateStorage(key);\n\n    // Displays messge to user that poll has been completed\n    this.setState({\n      isPollAnswered: true,\n    });\n\n    // Updates state count depending on which option the user has selected\n    if (state.userSelection === \"optionA\") {\n      optionA++;\n      this.setState({\n        optionOneCount: optionA,\n      });\n      this.sendCount(\"optionACount\");\n    } else if (state.userSelection === \"optionB\") {\n      optionB++;\n      this.setState({\n        optionTwoCount: optionB++,\n      });\n      this.sendCount(\"optionBCount\");\n    }\n  };\n\n  // Render JSX Method ----- +\n  render() {\n    const poll = this.state.poll;\n    console.log(this.state.isPollAnswered);\n    console.log(this.state.isPollStored);\n    return (\n      <main className=\"viewPoll\">\n        <section\n          className={this.state.isPollAnswered === false ? \"show\" : \"hide\"}\n        >\n          <form onSubmit={this.handleSubmit} className=\"viewPollForm\">\n            <h2>{poll.name}'s poll</h2>\n            <h3>{poll.question}</h3>\n            <div className=\"optionWrapper\" ariarole=\"radio-group\">\n              <label\n                htmlFor=\"optionA\"\n                onClick={this.handleSelect}\n                className={\n                  this.state.userSelection === \"optionA\"\n                    ? \"selected\"\n                    : undefined\n                }\n              >\n                {poll.optionA}\n                <input\n                  type=\"radio\"\n                  name=\"options\"\n                  id=\"optionA\"\n                  onChange={this.handleChange}\n                  value={poll.optionA}\n                  required\n                ></input>\n              </label>\n              <label\n                htmlFor=\"optionB\"\n                className={\n                  this.state.userSelection === \"optionB\"\n                    ? \"selected\"\n                    : undefined\n                }\n              >\n                {poll.optionB}\n                <input\n                  type=\"radio\"\n                  name=\"options\"\n                  id=\"optionB\"\n                  onChange={this.handleChange}\n                  value={poll.optionB}\n                  required\n                ></input>\n              </label>\n            </div>\n            <button type=\"submit\">Answer</button>\n          </form>\n        </section>\n        <div className={this.state.isPollAnswered === true ? \"show\" : \"hide\"}>\n          <p className=\"userMessage\">\n            Thank you for your submission!{\" \"}\n            <span role=\"img\" aria-labelledby=\"wink\"></span>\n          </p>\n        </div>\n        <div className={this.state.isPollStored === true ? \"show\" : \"hide\"}>\n          <p className=\"userMessage\">\n            Nice try. You can only vote once per poll{\" \"}\n            <span role=\"img\" aria-labelledby=\"wink\">\n              ð\n            </span>\n          </p>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default ViewPoll;\n","// Imports ----- +\nimport React, { Component, Fragment } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport HomePage from \"./HomePage\";\nimport CreatePoll from \"./CreatePoll\";\nimport PollAnalytics from \"./PollAnalytics\";\nimport PollResults from \"./PollResults\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ViewPoll from \"./ViewPoll\";\n\n// THIS IS A COMMENT SO THAT I CAN MAKE A PR\n// Component ----- +\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Fragment>\n          <Header />\n          <Route exact path=\"/anonymousVotingBooth\" component={HomePage} />\n          <Route exact path=\"/createpoll\" component={CreatePoll} />\n          <Route path=\"/polls/:pollKey/analytics\" component={PollAnalytics} />\n          <Route path=\"/polls/:pollKey/view\" component={ViewPoll} />\n          <Route path=\"/polls/:pollKey/results\" component={PollResults} />\n          <Footer />\n        </Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}