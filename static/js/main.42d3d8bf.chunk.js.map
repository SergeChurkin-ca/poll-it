{"version":3,"sources":["firebase.js","UserGeneratedPolls.js","HomePage.js","CreatePoll.js","PollLinks.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","UserGeneratedPolls","database","ref","state","polls","on","snapshot","console","log","val","this","props","match","params","actualId","className","map","pollsObject","key","id","titleInput","questionInput","type","name","value","optionOne","optionTwo","Component","CreatePoll","to","handleChange","e","target","setState","optionOneInput","optionTwoInput","handleSubmit","event","preventDefault","dbRef","OptionOneInput","pollObject","pollObj","push","errorMessage","userKey","action","onSubmit","htmlFor","onChange","PollLinks","poll","pollId","pollLink","App","exact","path","component","HomePage","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42d3d8bf.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDQOt04CcDsNhQHAyZMFwjSLY1X2MuEQTg\",\n    authDomain: \"voting-booth-4107f.firebaseapp.com\",\n    databaseURL: \"https://voting-booth-4107f.firebaseio.com\",\n    projectId: \"voting-booth-4107f\",\n    storageBucket: \"voting-booth-4107f.appspot.com\",\n    messagingSenderId: \"424744854902\",\n    appId: \"1:424744854902:web:8119084df741436fab4657\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport { Link } from \"react-router-dom\";\n\nclass UserGeneratedPolls extends Component {\n  constructor() {\n    super();\n    this.database = firebase.database().ref();\n    this.state = {\n      polls: [],\n    };\n  }\n\n  // **************************\n  componentDidMount() {\n    const dbRef = firebase\n      .database()\n      .ref()\n      .on(\"value\", (snapshot) => {\n        console.log(snapshot.val());\n      });\n  }\n\n  // dbRef.on(\"value\", (snapshot) => {\n  //   // checking changes in db\n\n  //   const data = snapshot.val();\n  //   const newToursAarray = [];\n\n  //   for (let inventoryName in data) {\n  //     const toursObject = {\n  //       id: inventoryName,\n  //       optionOne: data[inventoryName].optionOneInput,\n  //       optionTwo: data[inventoryName].optionTwoInput,\n  //       questionInput: data[inventoryName].questionInput,\n  //       titleInput: data[inventoryName].titleInput,\n  //     };\n  //     newToursAarray.push(toursObject);\n  //   }\n\n  //   this.setState({\n  //     polls: newToursAarray,\n  //   });\n  // });\n  // }\n\n  render() {\n    console.log(this.props.match.params.actualId);\n    return (\n      <div className=\"tourlist\">\n        <h1> User Generated Polls </h1>\n        {this.state.polls.map((pollsObject) => {\n          return (\n            <ul className=\"inventoryItem\" key={pollsObject.id}>\n              <h2> {pollsObject.titleInput} </h2>\n              <h3> Please chose on option {pollsObject.questionInput}: </h3>\n              <li>\n                <input\n                  type=\"radio\"\n                  name=\"one\"\n                  value={pollsObject.optionOne}\n                ></input>\n                {pollsObject.optionOne}\n              </li>\n              <li>\n                <input\n                  type=\"radio\"\n                  name=\"two\"\n                  value={pollsObject.optionTwo}\n                ></input>\n                {pollsObject.optionTwo}\n              </li>\n            </ul>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default UserGeneratedPolls;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport UserGeneratedPolls from \"./UserGeneratedPolls\";\n\nclass CreatePoll extends Component {\n  render() {\n    return (\n      <main>\n        <section>\n          <Link to=\"/createpoll\">\n            <p> Create poll </p>\n          </Link>\n          <UserGeneratedPolls />\n        </section>\n      </main>\n    );\n  }\n}\nexport default CreatePoll;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nclass CreatePoll extends Component {\n    constructor() {\n        super();\n        this.state = {\n            key: \"\",\n            titleInput: \"\",\n            questionInput: \"\",\n            optionOneInput: \"\",\n            optionTwoInput: \"\",\n            errorMessage: \"\",\n        };\n    }\n\n    handleChange = (e) => {\n        switch (e.target.id) {\n            case \"titleInput\":\n                this.setState({\n                    titleInput: e.target.value,\n                });\n                break;\n            case \"questionInput\":\n                this.setState({\n                    questionInput: e.target.value,\n                });\n                break;\n            case \"optionOneInput\":\n                this.setState({\n                    optionOneInput: e.target.value,\n                });\n                break;\n            case \"optionTwoInput\":\n                this.setState({\n                    optionTwoInput: e.target.value,\n                });\n                break;\n            default:\n                break;\n        }\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const dbRef = firebase.database().ref();\n        if (\n            this.state.questionInput !== \"\" &&\n            this.state.titleInput !== \"\" &&\n            this.state.OptionOneInput !== \"\" &&\n            this.state.optionTwoInput !== \"\"\n        ) {\n            const pollObject = {\n                titleInput: this.state.titleInput,\n                questionInput: this.state.questionInput,\n                optionOneInput: this.state.optionOneInput,\n                optionTwoInput: this.state.optionTwoInput,\n            };\n            // !!!!\n            const pollObj = dbRef.push(pollObject);\n            // !! Destructure this and re-name key state\n            // reset error handle and clear input text\n            this.setState({\n                key: pollObj.key,\n            });\n            // reset error handle and clear input text\n            this.setState({\n                errorMessage: \"\",\n                titleInput: \"\",\n                questionInput: \"\",\n                optionOneInput: \"\",\n                optionTwoInput: \"\",\n            });\n        } else {\n            // error handling\n            this.setState({\n                errorMessage: \"Please fill in all inputs before submitting\",\n            });\n        }\n    };\n\n    render() {\n        const userKey = this.state.key;\n        return ( \n            <main>\n                <section>\n                <h2> Create your Poll </h2> \n                <form action = \"/\" onSubmit = { this.handleSubmit }>\n                    <label htmlFor = \"titleInput\"> title </label> \n                    <input type = \"text\"\n                    id = \"titleInput\"\n                    value = { this.state.titleInput }\n                    onChange = { this.handleChange }\n                    /> \n                    <label htmlFor = \"questionInput\"> question </label> \n                    <input type = \"text\"\n                    id = \"questionInput\"\n                    value = { this.state.questionInput }\n                    onChange = { this.handleChange }\n                    /> \n                    <label htmlFor = \"optionOne\" > option one </label> \n                    <input type = \"text\"\n                    id = \"optionOneInput\"\n                    value = { this.state.optionOneInput }\n                    onChange = { this.handleChange }\n                    /> \n                    <label htmlFor = \"optionTwo\"> option two </label> \n                    <input type = \"text\"\n                    id = \"optionTwoInput\"\n                    value = { this.state.optionTwoInput }\n                    onChange = { this.handleChange }\n                    /> \n                    <button type = \"submit\" > Create Poll </button> \n                </form> \n                <p> { this.state.errorMessage } </p> \n                <Link to = { `/polllinks/${userKey}` }>\n                    Click me to see the poll analytics \n                </Link> \n                </section> \n            </main>\n        );\n    }\n}\nexport default CreatePoll;","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport UserGeneratedPolls from \"./UserGeneratedPolls\";\nimport { Link } from \"react-router-dom\";\n\nclass PollLinks extends Component {\n  constructor() {\n    super();\n    this.state = {\n      poll: {},\n    };\n  }\n  componentDidMount() {\n    firebase\n      .database()\n      .ref(this.props.match.params.pollId)\n      .on(\"value\", (snapshot) => {\n        this.setState({\n          poll: snapshot.val(),\n        });\n      });\n  }\n\n  render() {\n    \n    const pollLink = `${this.props.match.params.pollId}&${this.state.poll.titleInput}`;\n\n    return (\n      <div>\n        <p> The User ID is: {this.props.match.params.pollId} </p>\n        <h1> The title is: {this.state.poll.titleInput} </h1>\n        <p> The question is: {this.state.poll.questionInput} </p>\n        <p> The first option is: {this.state.poll.optionOneInput} </p>\n        <p> The second option is: {this.state.poll.optionTwoInput} </p>\n        <Link to={`/theactualpoll/${pollLink}`}>Here is your poll link</Link>\n      </div>\n    );\n  }\n}\n\nexport default PollLinks;\n","import React, { Component } from \"react\";\nimport HomePage from \"./HomePage\";\nimport CreatePoll from \"./CreatePoll\";\nimport PollLinks from \"./PollLinks\";\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport UserGeneratedPolls from \"./UserGeneratedPolls\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/createpoll\" component={CreatePoll} />\n          <Route path=\"/polllinks/:pollId\" component={PollLinks} />\n          <Route path=\"/theactualpoll/:actualId\" component={UserGeneratedPolls} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}